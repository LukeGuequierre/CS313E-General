"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, Luke Guequierre, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: lkg746
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 10/21. If you choose to use
        # a dummy node, you can comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        self.dummy = Node(None, None)
        #self.head = None

    def insert_term(self, coeff, exp):
        """ 
        Insert the term with the coefficient coeff and exponent exp into the polynomial.
        If a term with that exponent already exists, add the coefficients together.
        You must keep the terms in descending order by exponent. 
        """
        if coeff == 0:
            return
        new_node = Node(coeff, exp)
        if self.dummy.next is None:
            self.dummy.next = new_node
            return
        previous = self.dummy
        current = self.dummy.next
        while current is not None:
            if current.exp == new_node.exp:
                current.coeff += new_node.coeff
                if current.coeff == 0:
                    previous.next = current.next
                return
            if current.exp < new_node.exp:
                previous.next = new_node
                new_node.next = current
                return
            previous = previous.next
            current = current.next
        previous.next = new_node
        new_node.next = current

    def add(self, p):
        """ 
        Add a polynomial p to the polynomial and return the 
        resulting polynomial as a new linked list. 
        """
        if self.dummy.next is None:
            return p
        new_list = LinkedList()
        current = self.dummy.next
        while current is not None:
            new_list.insert_term(current.coeff, current.exp)
            current = current.next
        if p.dummy.next is None:
            return self
        pcurrent = p.dummy.next
        while pcurrent is not None:
            new_list.insert_term(pcurrent.coeff, pcurrent.exp)
            pcurrent = pcurrent.next
        return new_list




    def mult(self, p):
        """
        Multiply a polynomial p with the polynomial and return the product as a new linked list. 
        """
        if self.dummy.next is None:
            return self
        if p.dummy.next is None:
            return p
        new_list = LinkedList()
        pcurrent = p.dummy.next
        while pcurrent is not None:
            temp_list = LinkedList()
            current = self.dummy.next
            while current is not None:
                temp_list.insert_term(current.coeff * pcurrent.coeff, current.exp + pcurrent.exp)
                current = current.next
            new_list = new_list.add(temp_list)
            pcurrent = pcurrent.next
        return new_list


    def __str__(self):
        """ Return a string representation of the polynomial. """
        current = self.dummy.next
        result = ''
        while current is not None:
            result += f'({current.coeff}, {current.exp})'
            if current.next is not None:
                result += ' + '
            current = current.next
        return result


def main():
    # read data from stdin using input() and create polynomial p
    file_name = input()
    p = LinkedList()
    q = LinkedList()
    """line = f.readline()
    while line != '':
        line = f.readline()
        line = line.strip()
        nums = []
        l = 0
        while l < len(line):
            if line[l] == '-':
                if l + 1 < len(line):
                    nums.append(int(line[l:l+2]))
                    l += 1
            elif line[l].isdigit():
                nums.append(int(line[l]))
            l += 1
        if len(nums) > 1:
            p.insert_term(nums[0], nums[1])
    # read data from stdin using input() and create polynomial q
    line = f.readline()
    for line in f:
        line = line.strip()
        nums = []
        l = 0
        while l < len(line):
            if line[l] == '-':
                if l + 1 < len(line):
                    nums.append(int(line[l:l+2]))
                    l += 1
            elif line[l].isdigit():
                nums.append(int(line[l]))
            l += 1
        if len(nums) > 1:
            q.insert_term(nums[0], nums[1])
    # get sum of p and q as a new linked list and print sum
    sum = p.add(q)
    print(sum)
    # get product of p and q as a new linked list and print product
    prod = p.mult(q)
    print(prod)
    """


if __name__ == "__main__":
    main()

poly1 = LinkedList()
poly1.insert_term(4, 3)  # 4x^3
poly1.insert_term(5, 5)  # 5x^5

poly2 = LinkedList()

print(poly1.mult(poly2))